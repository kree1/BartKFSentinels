using Handelabra;
using Handelabra.Sentinels.Engine.Controller;
using Handelabra.Sentinels.Engine.Model;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BartKFSentinels.Victory
{
    public class ShowVulnerabilityCardController : VictoryUtilityCardController
    {
        public ShowVulnerabilityCardController(Card card, TurnTakerController turnTakerController)
            : base(card, turnTakerController)
        {
            // Show list of Ongoing cards in your deck & trash
            SpecialStringMaker.ShowListOfCardsAtLocation(TurnTaker.Deck, new LinqCardCriteria((Card c) => IsOngoing(c), "Ongoing"));
            SpecialStringMaker.ShowListOfCardsAtLocation(TurnTaker.Trash, new LinqCardCriteria((Card c) => IsOngoing(c), "Ongoing"));
        }

        public override IEnumerator Play()
        {
            // "You may put any number of your Mantle cards from play into your hand."
            LinqCardCriteria mantleCriteria = new LinqCardCriteria((Card c) => c.Owner == TurnTaker && GameController.DoesCardContainKeyword(c, MantleKeyword), TurnTaker.Name + "'s Mantle");
            List<MoveCardDestination> dests = new List<MoveCardDestination>();
            dests.Add(new MoveCardDestination(HeroTurnTaker.Hand));
            IEnumerator returnCoroutine = GameController.SelectCardsFromLocationAndMoveThem(DecisionMaker, TurnTaker.PlayArea, 0, TurnTaker.PlayArea.Cards.Where(mantleCriteria.Criteria).Count(), mantleCriteria, dests, cardSource: GetCardSource());
            if (UseUnityCoroutines)
            {
                yield return GameController.StartCoroutine(returnCoroutine);
            }
            else
            {
                GameController.ExhaustCoroutine(returnCoroutine);
            }
            // "Search your deck or trash for an Ongoing card and put it into play or into your hand."
            IEnumerator searchCoroutine = SearchForCardsEx(TurnTakerController, true, true, 1, 1, new LinqCardCriteria((Card c) => IsOngoing(c), "Ongoing"), true, true, false);
            if (UseUnityCoroutines)
            {
                yield return GameController.StartCoroutine(searchCoroutine);
            }
            else
            {
                GameController.ExhaustCoroutine(searchCoroutine);
            }
            // "Shuffle your trash into your deck."
            IEnumerator shuffleCoroutine = GameController.ShuffleTrashIntoDeck(TurnTakerController, cardSource: GetCardSource());
            if (UseUnityCoroutines)
            {
                yield return GameController.StartCoroutine(shuffleCoroutine);
            }
            else
            {
                GameController.ExhaustCoroutine(shuffleCoroutine);
            }
        }
    }
}
